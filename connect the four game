import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.Button;
import javafx.scene.layout.GridPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;

public class ConnectFour extends Application {
    private static final int ROWS = 6;
    private static final int COLUMNS = 7;
    private char[][] board = new char[ROWS][COLUMNS];
    private GridPane gridPane = new GridPane();
    private boolean gameOver = false;
    private boolean yellowTurn = true;
    private Label playerLabel;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        initializeBoard();
        drawBoard(primaryStage);

        primaryStage.setTitle("Janak's Connect Four");
        playerLabel = new Label("Player: Yellow");
        primaryStage.setScene(new Scene(new javafx.scene.layout.VBox(playerLabel, gridPane), COLUMNS * 100, (ROWS + 2) * 100));
        primaryStage.show();
    }

    private void initializeBoard() {
        for (int row = 0; row < ROWS; row++) {
            for (int col = 0; col < COLUMNS; col++) {
                board[row][col] = ' ';
            }
        }
    }

    private void drawBoard(Stage stage) {
        for (int row = 0; row < ROWS; row++) {
            for (int col = 0; col < COLUMNS; col++) {
                Circle circle = createCircle();
                int finalRow = row;
                int finalCol = col;
                circle.setOnMouseClicked(e -> handleMove(finalRow, finalCol, circle, stage));
                gridPane.add(circle, col, row);
            }
        }
    }

    private Circle createCircle() {
        Circle circle = new Circle(45);
        circle.setFill(Color.WHITE);
        circle.setStroke(Color.BLACK);
        return circle;
    }

    private void handleMove(int row, int col, Circle circle, Stage stage) {
        if (!gameOver && board[row][col] == ' ') {
            int emptyRow = getEmptyRow(col);
            if (emptyRow != -1) {
                char currentPlayer = yellowTurn ? 'Y' : 'R';
                board[emptyRow][col] = currentPlayer;
                Color color = (currentPlayer == 'Y') ? Color.YELLOW : Color.RED;
                circle.setFill(color);

                if (checkWin(emptyRow, col, currentPlayer)) {
                    displayWinner(currentPlayer, stage);
                } else if (isBoardFull()) {
                    displayWinner('D', stage); // 'D' represents a draw
                }

                yellowTurn = !yellowTurn;
                playerLabel.setText("Player: " + (yellowTurn ? "Yellow" : "Red"));
            }
        }
    }

    private int getEmptyRow(int col) {
        for (int row = ROWS - 1; row >= 0; row--) {
            if (board[row][col] == ' ') {
                return row;
            }
        }
        return -1;
    }

    private boolean isBoardFull() {
        for (int col = 0; col < COLUMNS; col++) {
            if (board[0][col] == ' ') {
                return false;
            }
        }
        return true;
    }

    private boolean checkWin(int row, int col, char currentPlayer) {
        // Check for four in a row horizontally, vertically, and diagonally
        int count = 0;

        // Check horizontally
        for (int c = 0; c < COLUMNS; c++) {
            if (board[row][c] == currentPlayer) {
                count++;
                if (count >= 4) {
                    return true;
                }
            } else {
                count = 0;
            }
        }

        count = 0;
        // Check vertically
        for (int r = 0; r < ROWS; r++) {
            if (board[r][col] == currentPlayer) {
                count++;
                if (count >= 4) {
                    return true;
                }
            } else {
                count = 0;
            }
        }

        count = 0;
        // Check diagonally (up-right)
        int r = row;
        int c = col;
        while (r < ROWS && c < COLUMNS && board[r][c] == currentPlayer) {
            count++;
            r++;
            c++;
        }
        r = row - 1;
        c = col - 1;
        while (r >= 0 && c >= 0 && board[r][c] == currentPlayer) {
            count++;
            r--;
            c--;
        }
        if (count >= 4) {
            return true;
        }

        count = 0;
        // Check diagonally (up-left)
        r = row;
        c = col;
        while (r < ROWS && c >= 0 && board[r][c] == currentPlayer) {
            count++;
            r++;
            c--;
        }
        r = row - 1;
        c = col + 1;
        while (r >= 0 && c < COLUMNS && board[r][c] == currentPlayer) {
            count++;
            r--;
            c++;
        }
        return count >= 4;
    }

    private void displayWinner(char player, Stage stage) {
        gameOver = true;
        String message = "It's a draw!";
        if (player == 'Y') {
            message = "Yellow won!";
        } else if (player == 'R') {
            message = "Red won!";
        }
        Stage gameOverStage = new Stage();
        gameOverStage.initOwner(stage);
        gameOverStage.setTitle("Game Over");
        Button closeButton = new Button("Close");
        Label winnerLabel = new Label(message);
        closeButton.setOnAction(e -> gameOverStage.close());
        gameOverStage.setScene(new Scene(new javafx.scene.layout.VBox(winnerLabel, closeButton), 200, 100));
        gameOverStage.show();
    }
}

import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.layout.VBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.control.Button;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.paint.Color;
import javafx.geometry.Pos;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;

public class HangmanGameGUI extends Application {
    private String wordToGuess;
    private char[] currentProgress;
    private int maxTries = 6;
    private int remainingTries;
    private int currentTry = 0;
    private boolean gameEnded = false;
    private String[] hangmanParts = new String[7];

    private Label wordLabel = new Label();
    private Label triesLabel = new Label("Remaining Tries: " + maxTries);
    private TextField guessField = new TextField();
    private Button guessButton = new Button("Guess");
    private Canvas canvas = new Canvas(300, 200);
    private GraphicsContext gc = canvas.getGraphicsContext2D();

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        playNewGame();

        VBox root = new VBox(10);
        root.setAlignment(Pos.CENTER);
        root.getChildren().addAll(wordLabel, triesLabel, canvas, guessField, guessButton);

        guessButton.setOnAction(e -> handleGuess());
        Scene scene = new Scene(root, 400, 300);

        primaryStage.setTitle(" Janak's Hangman Game");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void playNewGame() {
        wordToGuess = generateWord();
        currentProgress = new char[wordToGuess.length()];
        remainingTries = maxTries;
        currentTry = 0;
        gameEnded = false;

        initializeProgress();
        initializeHangmanParts();
        drawHangman();
        updateWordLabel();

        guessField.clear();
    }

    private String generateWord() {
        // Replace this with your word generation logic
        String[] words = {"hangman", "computer", "programming", "java", "example"};
        return words[(int)(Math.random() * words.length)];
    }

    private void initializeProgress() {
        for (int i = 0; i < currentProgress.length; i++) {
            currentProgress[i] = '_';
        }
    }

    private void initializeHangmanParts() {
        hangmanParts[0] = "";
        hangmanParts[1] = "  |=======|\n";
        hangmanParts[2] = "  |=======|\n  O\n";
        hangmanParts[3] = "  |=======|\n  O\n  |\n";
        hangmanParts[4] = "  |=======|\n  O\n /|\\\n";
        hangmanParts[5] = "  |=======|\n  O\n /|\\  \n / \n";
        hangmanParts[6] = "  |=======|\n  O\n /|\\  \n / \\ \n";
    }

    private void drawHangman() {
        gc.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());
        gc.setFill(Color.BLACK);
        gc.setStroke(Color.BLACK);
        gc.setFont(Font.font("Monospace", FontWeight.BOLD, 18));

        String hangman = hangmanParts[currentTry];
        gc.fillText(hangman, 10, 20);
    }

    private void updateWordLabel() {
        wordLabel.setText("Current Progress: " + String.valueOf(currentProgress));
        triesLabel.setText("Remaining Tries: " + remainingTries);
    }

    private void handleGuess() {
        if (!gameEnded) {
            String guess = guessField.getText().toLowerCase();

            if (guess.length() == 1) {
                boolean correctGuess = false;

                for (int i = 0; i < wordToGuess.length(); i++) {
                    if (wordToGuess.charAt(i) == guess.charAt(0)) {
                        currentProgress[i] = guess.charAt(0);
                        correctGuess = true;
                    }
                }

                if (!correctGuess) {
                    currentTry++;
                    remainingTries--;
                    if (remainingTries == 0) {
                        gameEnded = true;
                        wordLabel.setText("Game Over! The word was: " + wordToGuess + "\nPress Enter to play again.");
                    }
                }

                updateWordLabel();

                if (String.valueOf(currentProgress).equals(wordToGuess)) {
                    gameEnded = true;
                    wordLabel.setText("Congratulations! You've won!\nPress Enter to play again.");
                }

                if (gameEnded) {
                    guessField.setOnAction(e -> playNewGame());
                }

                guessField.clear();
                drawHangman();
            }
        }
    }
}
